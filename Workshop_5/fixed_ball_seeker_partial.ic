
/* Example code for staying in a boundary 
   Hardware configuration
   - Left Motor DC Motor chanel M-0, Right Motor DC Motor chanel M-1
   - Left Sensor to AI-31, Mid Sensor to AI-25, Right Sensor to AI-17 */
//- Encoder left connect to port IN-8  
//- Encoder right connect to port IN-7 
#define POWER 80   /*Configuration power drive motor */                                        

#use "encoder_lib.ic"   
#use "read_sensor_function.ic"

int turn_count;

void main(void)
{
    int value;
    
    turn_count = 0;
    encoder_init();  // Initial encoder
    
    while(1)
      {
        value = analog(2);
        printf("Read to Start!!\n");
        if(value >50 )
          {
            sleep(0.1);
        }
        else
          {
            motor(1,POWER+20);
            motor(0,POWER+20);
            sleep(1.4);
            break;
        }
    }
    
    while(!stop_button())    // Infinite loop 
      {
        value = read_distance();   // Read analog value from sensor 
        if(value==1) // Distance interval 10-80 cm 
          {
            printf("I see a ball......\n");
            // Display distance value 
            move_toward();
        } 
        else if (value==2)
          {
            printf("Out of Sight... \n");
            // Show mesage out of Range 
            keep_searching();
        }
        else
        { 
            printf("I have a Ball.\n");  
            kick_it();
        }    
    } 
}

int read_distance(void)
{
    int an;  // Declare a variable for analog input from sensor 
    an = analog(6);   // Read analog value from sensor 
    
    if(an>=13 && an<=68)//10-80cm
      {
        return 1;
    }
    else if(an>68 && an<=136)//1-10cm
      {
        return 3;
    }
    else
    {
        return 2;
    }
}

void keep_searching(void)
{
    int sensor_status;
    count_step(SPIN_LEFT,1,RIGHT);
    sensor_status = read_sensors();
    if(sensor_status != 0)
      {
        stay_in_box(sensor_status);
    }
    turn_count++;
    if(turn_count >= 25)
      {
        turn_count = 0;
        move_fd();
    }  
    sleep(0.1);
}

void move_toward(void)
{
    int sensor_status;
    sensor_status = read_sensors();
    stay_in_box(sensor_status);      
}

void kick_it(void)
{
    int sensor_status;
    sensor_status = read_sensors();
    stay_in_box(sensor_status);
}

void move_fd(void)
{
    int i;
    int sensor_status;
    
    i = 0;
    while(i<40)
      {
        sensor_status = read_sensors();
        stay_in_box(sensor_status);
        i++;
    }
}

void stay_in_box(int i)
{
    switch (i)
      {
        case 0:             // 000 Safe 
          count_step(FORWARD,1,LEFT);      // Go forward
        break;
        
        case 1:             // 001 Line on the right 
          count_step(BACKWARD,10,RIGHT);    // Go backward to clear the line
        count_step(TURN_LEFT,15,RIGHT);   // Turn left to get back to the field    
        break;
        
        case 2:             // 010 Most unlikely 
          ao();                             // Turn off all motors
        msleep(100L);                     // Pause for 0.1 sec 
        break;
        
        case 3:             // 011 Line on the right 
          count_step(BACKWARD,10,RIGHT);    // Go backward to clear the line
        count_step(TURN_LEFT,10,RIGHT);   // Turn left to get back to the field    
        break;
        
        case 4:             // 100 Line on the left 
          count_step(BACKWARD,10,RIGHT);    // Go backward to clear the line
        count_step(TURN_RIGHT,15,LEFT);   // Turn right to get back to the field    
        break;
        
        case 5:             // 101 between two lines in the corner 
          count_step(BACKWARD,15,RIGHT);    // Go backward to clear the line
        count_step(SPIN_RIGHT,10,LEFT);   // Turn around 180 degree to get back to the field    
        break;
        
        case 6:             // 110 heading to the right 
          count_step(BACKWARD,10,RIGHT);    // Go backward to clear the line
        count_step(TURN_RIGHT,10,LEFT);   // Turn right to get back to the field    
        break;
        
        case 7:             // 111 meeting the line straight ahead 
          count_step(BACKWARD,15,RIGHT);    // Go backward to clear the line
        count_step(SPIN_RIGHT,10,LEFT);   // Turn around 180 degree to get back to the field    
        break;
        
        default:            // If out of condition 
          count_step(FORWARD,1,LEFT);       // Direct forward
        break;
    }  
}
